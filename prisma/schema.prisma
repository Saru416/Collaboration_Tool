
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String       @id @default(uuid())
  authId          String       @unique // Supabase UUID
  email           String       @unique
  username        String
  createdAt       DateTime     @default(now())

  roomMemberships RoomMember[]
  messages        Message[]
  ownedRooms      Room[]       @relation("RoomOwner")
}

model Room {
  id        String       @id @default(uuid())
  name      String       @unique
  ownerId   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  owner     User         @relation("RoomOwner", fields: [ownerId], references: [id])
  members   RoomMember[]
  messages  Message[]
  documents Document[]
  whiteboardSessions WhiteboardSession[] 
}

model RoomMember {
  id        String     @id @default(uuid())
  roomId    String
  userId    String
  role      Role
  joinedAt  DateTime   @default(now())

  room      Room       @relation(fields: [roomId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
}

model Message {
  id        String     @id @default(uuid())
  roomId    String
  senderId  String
  content   String
  sentAt    DateTime   @default(now())

  room      Room       @relation(fields: [roomId], references: [id])
  sender    User       @relation(fields: [senderId], references: [id])
}

model Document {
  id        String     @id @default(uuid())
  roomId    String
  title     String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  room      Room       @relation(fields: [roomId], references: [id])
}

model WhiteboardSession {
  id        String   @id @default(uuid())
  roomId    String
  data      Json     // or String if using SQLite
  createdAt DateTime @default(now())

  room      Room     @relation(fields: [roomId], references: [id])
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}

